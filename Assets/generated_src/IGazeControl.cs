/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class IGazeControl : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IGazeControl(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(IGazeControl obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~IGazeControl() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          yarpPINVOKE.delete_IGazeControl(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual bool setTrackingMode(bool f) {
    bool ret = yarpPINVOKE.IGazeControl_setTrackingMode(swigCPtr, f);
    return ret;
  }

  public virtual bool getTrackingMode(SWIGTYPE_p_bool f) {
    bool ret = yarpPINVOKE.IGazeControl_getTrackingMode__SWIG_0(swigCPtr, SWIGTYPE_p_bool.getCPtr(f));
    return ret;
  }

  public virtual bool getFixationPoint(Vector fp, Stamp stamp) {
    bool ret = yarpPINVOKE.IGazeControl_getFixationPoint__SWIG_0(swigCPtr, Vector.getCPtr(fp), Stamp.getCPtr(stamp));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getFixationPoint(Vector fp) {
    bool ret = yarpPINVOKE.IGazeControl_getFixationPoint__SWIG_1(swigCPtr, Vector.getCPtr(fp));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getAngles(Vector ang, Stamp stamp) {
    bool ret = yarpPINVOKE.IGazeControl_getAngles__SWIG_0(swigCPtr, Vector.getCPtr(ang), Stamp.getCPtr(stamp));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getAngles(Vector ang) {
    bool ret = yarpPINVOKE.IGazeControl_getAngles__SWIG_1(swigCPtr, Vector.getCPtr(ang));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool lookAtFixationPoint(Vector fp) {
    bool ret = yarpPINVOKE.IGazeControl_lookAtFixationPoint(swigCPtr, Vector.getCPtr(fp));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool lookAtAbsAngles(Vector ang) {
    bool ret = yarpPINVOKE.IGazeControl_lookAtAbsAngles(swigCPtr, Vector.getCPtr(ang));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool lookAtRelAngles(Vector ang) {
    bool ret = yarpPINVOKE.IGazeControl_lookAtRelAngles(swigCPtr, Vector.getCPtr(ang));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool lookAtMonoPixel(int camSel, Vector px, double z) {
    bool ret = yarpPINVOKE.IGazeControl_lookAtMonoPixel__SWIG_0(swigCPtr, camSel, Vector.getCPtr(px), z);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool lookAtMonoPixel(int camSel, Vector px) {
    bool ret = yarpPINVOKE.IGazeControl_lookAtMonoPixel__SWIG_1(swigCPtr, camSel, Vector.getCPtr(px));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool lookAtMonoPixelWithVergence(int camSel, Vector px, double ver) {
    bool ret = yarpPINVOKE.IGazeControl_lookAtMonoPixelWithVergence(swigCPtr, camSel, Vector.getCPtr(px), ver);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool lookAtStereoPixels(Vector pxl, Vector pxr) {
    bool ret = yarpPINVOKE.IGazeControl_lookAtStereoPixels(swigCPtr, Vector.getCPtr(pxl), Vector.getCPtr(pxr));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getNeckTrajTime(SWIGTYPE_p_double t) {
    bool ret = yarpPINVOKE.IGazeControl_getNeckTrajTime__SWIG_0(swigCPtr, SWIGTYPE_p_double.getCPtr(t));
    return ret;
  }

  public virtual bool getEyesTrajTime(SWIGTYPE_p_double t) {
    bool ret = yarpPINVOKE.IGazeControl_getEyesTrajTime__SWIG_0(swigCPtr, SWIGTYPE_p_double.getCPtr(t));
    return ret;
  }

  public virtual bool getVORGain(SWIGTYPE_p_double gain) {
    bool ret = yarpPINVOKE.IGazeControl_getVORGain(swigCPtr, SWIGTYPE_p_double.getCPtr(gain));
    return ret;
  }

  public virtual bool getOCRGain(SWIGTYPE_p_double gain) {
    bool ret = yarpPINVOKE.IGazeControl_getOCRGain(swigCPtr, SWIGTYPE_p_double.getCPtr(gain));
    return ret;
  }

  public virtual bool getSaccadesStatus(SWIGTYPE_p_bool f) {
    bool ret = yarpPINVOKE.IGazeControl_getSaccadesStatus(swigCPtr, SWIGTYPE_p_bool.getCPtr(f));
    return ret;
  }

  public virtual bool getSaccadesInhibitionPeriod(SWIGTYPE_p_double period) {
    bool ret = yarpPINVOKE.IGazeControl_getSaccadesInhibitionPeriod(swigCPtr, SWIGTYPE_p_double.getCPtr(period));
    return ret;
  }

  public virtual bool getSaccadesActivationAngle(SWIGTYPE_p_double angle) {
    bool ret = yarpPINVOKE.IGazeControl_getSaccadesActivationAngle(swigCPtr, SWIGTYPE_p_double.getCPtr(angle));
    return ret;
  }

  public virtual bool getLeftEyePose(Vector x, Vector o, Stamp stamp) {
    bool ret = yarpPINVOKE.IGazeControl_getLeftEyePose__SWIG_0(swigCPtr, Vector.getCPtr(x), Vector.getCPtr(o), Stamp.getCPtr(stamp));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getLeftEyePose(Vector x, Vector o) {
    bool ret = yarpPINVOKE.IGazeControl_getLeftEyePose__SWIG_1(swigCPtr, Vector.getCPtr(x), Vector.getCPtr(o));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getRightEyePose(Vector x, Vector o, Stamp stamp) {
    bool ret = yarpPINVOKE.IGazeControl_getRightEyePose__SWIG_0(swigCPtr, Vector.getCPtr(x), Vector.getCPtr(o), Stamp.getCPtr(stamp));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getRightEyePose(Vector x, Vector o) {
    bool ret = yarpPINVOKE.IGazeControl_getRightEyePose__SWIG_1(swigCPtr, Vector.getCPtr(x), Vector.getCPtr(o));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getHeadPose(Vector x, Vector o, Stamp stamp) {
    bool ret = yarpPINVOKE.IGazeControl_getHeadPose__SWIG_0(swigCPtr, Vector.getCPtr(x), Vector.getCPtr(o), Stamp.getCPtr(stamp));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getHeadPose(Vector x, Vector o) {
    bool ret = yarpPINVOKE.IGazeControl_getHeadPose__SWIG_1(swigCPtr, Vector.getCPtr(x), Vector.getCPtr(o));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool get2DPixel(int camSel, Vector x, Vector px) {
    bool ret = yarpPINVOKE.IGazeControl_get2DPixel(swigCPtr, camSel, Vector.getCPtr(x), Vector.getCPtr(px));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool get3DPoint(int camSel, Vector px, double z, Vector x) {
    bool ret = yarpPINVOKE.IGazeControl_get3DPoint(swigCPtr, camSel, Vector.getCPtr(px), z, Vector.getCPtr(x));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool get3DPointOnPlane(int camSel, Vector px, Vector plane, Vector x) {
    bool ret = yarpPINVOKE.IGazeControl_get3DPointOnPlane(swigCPtr, camSel, Vector.getCPtr(px), Vector.getCPtr(plane), Vector.getCPtr(x));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool get3DPointFromAngles(int mode, Vector ang, Vector x) {
    bool ret = yarpPINVOKE.IGazeControl_get3DPointFromAngles(swigCPtr, mode, Vector.getCPtr(ang), Vector.getCPtr(x));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getAnglesFrom3DPoint(Vector x, Vector ang) {
    bool ret = yarpPINVOKE.IGazeControl_getAnglesFrom3DPoint(swigCPtr, Vector.getCPtr(x), Vector.getCPtr(ang));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool triangulate3DPoint(Vector pxl, Vector pxr, Vector x) {
    bool ret = yarpPINVOKE.IGazeControl_triangulate3DPoint(swigCPtr, Vector.getCPtr(pxl), Vector.getCPtr(pxr), Vector.getCPtr(x));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getJointsDesired(Vector qdes) {
    bool ret = yarpPINVOKE.IGazeControl_getJointsDesired(swigCPtr, Vector.getCPtr(qdes));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getJointsVelocities(Vector qdot) {
    bool ret = yarpPINVOKE.IGazeControl_getJointsVelocities(swigCPtr, Vector.getCPtr(qdot));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getStereoOptions(Bottle options) {
    bool ret = yarpPINVOKE.IGazeControl_getStereoOptions(swigCPtr, Bottle.getCPtr(options));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool setNeckTrajTime(double t) {
    bool ret = yarpPINVOKE.IGazeControl_setNeckTrajTime(swigCPtr, t);
    return ret;
  }

  public virtual bool setEyesTrajTime(double t) {
    bool ret = yarpPINVOKE.IGazeControl_setEyesTrajTime(swigCPtr, t);
    return ret;
  }

  public virtual bool setVORGain(double gain) {
    bool ret = yarpPINVOKE.IGazeControl_setVORGain(swigCPtr, gain);
    return ret;
  }

  public virtual bool setOCRGain(double gain) {
    bool ret = yarpPINVOKE.IGazeControl_setOCRGain(swigCPtr, gain);
    return ret;
  }

  public virtual bool setSaccadesStatus(bool f) {
    bool ret = yarpPINVOKE.IGazeControl_setSaccadesStatus(swigCPtr, f);
    return ret;
  }

  public virtual bool setSaccadesInhibitionPeriod(double period) {
    bool ret = yarpPINVOKE.IGazeControl_setSaccadesInhibitionPeriod(swigCPtr, period);
    return ret;
  }

  public virtual bool setSaccadesActivationAngle(double angle) {
    bool ret = yarpPINVOKE.IGazeControl_setSaccadesActivationAngle(swigCPtr, angle);
    return ret;
  }

  public virtual bool setStereoOptions(Bottle options) {
    bool ret = yarpPINVOKE.IGazeControl_setStereoOptions(swigCPtr, Bottle.getCPtr(options));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool bindNeckPitch(double min, double max) {
    bool ret = yarpPINVOKE.IGazeControl_bindNeckPitch(swigCPtr, min, max);
    return ret;
  }

  public virtual bool blockNeckPitch(double val) {
    bool ret = yarpPINVOKE.IGazeControl_blockNeckPitch__SWIG_0(swigCPtr, val);
    return ret;
  }

  public virtual bool blockNeckPitch() {
    bool ret = yarpPINVOKE.IGazeControl_blockNeckPitch__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual bool bindNeckRoll(double min, double max) {
    bool ret = yarpPINVOKE.IGazeControl_bindNeckRoll(swigCPtr, min, max);
    return ret;
  }

  public virtual bool blockNeckRoll(double val) {
    bool ret = yarpPINVOKE.IGazeControl_blockNeckRoll__SWIG_0(swigCPtr, val);
    return ret;
  }

  public virtual bool blockNeckRoll() {
    bool ret = yarpPINVOKE.IGazeControl_blockNeckRoll__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual bool bindNeckYaw(double min, double max) {
    bool ret = yarpPINVOKE.IGazeControl_bindNeckYaw(swigCPtr, min, max);
    return ret;
  }

  public virtual bool blockNeckYaw(double val) {
    bool ret = yarpPINVOKE.IGazeControl_blockNeckYaw__SWIG_0(swigCPtr, val);
    return ret;
  }

  public virtual bool blockNeckYaw() {
    bool ret = yarpPINVOKE.IGazeControl_blockNeckYaw__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual bool blockEyes(double ver) {
    bool ret = yarpPINVOKE.IGazeControl_blockEyes__SWIG_0(swigCPtr, ver);
    return ret;
  }

  public virtual bool blockEyes() {
    bool ret = yarpPINVOKE.IGazeControl_blockEyes__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual bool getNeckPitchRange(SWIGTYPE_p_double min, SWIGTYPE_p_double max) {
    bool ret = yarpPINVOKE.IGazeControl_getNeckPitchRange(swigCPtr, SWIGTYPE_p_double.getCPtr(min), SWIGTYPE_p_double.getCPtr(max));
    return ret;
  }

  public virtual bool getNeckRollRange(SWIGTYPE_p_double min, SWIGTYPE_p_double max) {
    bool ret = yarpPINVOKE.IGazeControl_getNeckRollRange(swigCPtr, SWIGTYPE_p_double.getCPtr(min), SWIGTYPE_p_double.getCPtr(max));
    return ret;
  }

  public virtual bool getNeckYawRange(SWIGTYPE_p_double min, SWIGTYPE_p_double max) {
    bool ret = yarpPINVOKE.IGazeControl_getNeckYawRange(swigCPtr, SWIGTYPE_p_double.getCPtr(min), SWIGTYPE_p_double.getCPtr(max));
    return ret;
  }

  public virtual bool getBlockedVergence(SWIGTYPE_p_double ver) {
    bool ret = yarpPINVOKE.IGazeControl_getBlockedVergence(swigCPtr, SWIGTYPE_p_double.getCPtr(ver));
    return ret;
  }

  public virtual bool clearNeckPitch() {
    bool ret = yarpPINVOKE.IGazeControl_clearNeckPitch(swigCPtr);
    return ret;
  }

  public virtual bool clearNeckRoll() {
    bool ret = yarpPINVOKE.IGazeControl_clearNeckRoll(swigCPtr);
    return ret;
  }

  public virtual bool clearNeckYaw() {
    bool ret = yarpPINVOKE.IGazeControl_clearNeckYaw(swigCPtr);
    return ret;
  }

  public virtual bool clearEyes() {
    bool ret = yarpPINVOKE.IGazeControl_clearEyes(swigCPtr);
    return ret;
  }

  public virtual bool getNeckAngleUserTolerance(SWIGTYPE_p_double angle) {
    bool ret = yarpPINVOKE.IGazeControl_getNeckAngleUserTolerance(swigCPtr, SWIGTYPE_p_double.getCPtr(angle));
    return ret;
  }

  public virtual bool setNeckAngleUserTolerance(double angle) {
    bool ret = yarpPINVOKE.IGazeControl_setNeckAngleUserTolerance(swigCPtr, angle);
    return ret;
  }

  public virtual bool checkMotionDone(SWIGTYPE_p_bool f) {
    bool ret = yarpPINVOKE.IGazeControl_checkMotionDone__SWIG_0(swigCPtr, SWIGTYPE_p_bool.getCPtr(f));
    return ret;
  }

  public virtual bool waitMotionDone(double period, double timeout) {
    bool ret = yarpPINVOKE.IGazeControl_waitMotionDone__SWIG_0(swigCPtr, period, timeout);
    return ret;
  }

  public virtual bool waitMotionDone(double period) {
    bool ret = yarpPINVOKE.IGazeControl_waitMotionDone__SWIG_1(swigCPtr, period);
    return ret;
  }

  public virtual bool waitMotionDone() {
    bool ret = yarpPINVOKE.IGazeControl_waitMotionDone__SWIG_2(swigCPtr);
    return ret;
  }

  public virtual bool checkSaccadeDone(SWIGTYPE_p_bool f) {
    bool ret = yarpPINVOKE.IGazeControl_checkSaccadeDone(swigCPtr, SWIGTYPE_p_bool.getCPtr(f));
    return ret;
  }

  public virtual bool waitSaccadeDone(double period, double timeout) {
    bool ret = yarpPINVOKE.IGazeControl_waitSaccadeDone__SWIG_0(swigCPtr, period, timeout);
    return ret;
  }

  public virtual bool waitSaccadeDone(double period) {
    bool ret = yarpPINVOKE.IGazeControl_waitSaccadeDone__SWIG_1(swigCPtr, period);
    return ret;
  }

  public virtual bool waitSaccadeDone() {
    bool ret = yarpPINVOKE.IGazeControl_waitSaccadeDone__SWIG_2(swigCPtr);
    return ret;
  }

  public virtual bool stopControl() {
    bool ret = yarpPINVOKE.IGazeControl_stopControl(swigCPtr);
    return ret;
  }

  public virtual bool storeContext(SWIGTYPE_p_int id) {
    bool ret = yarpPINVOKE.IGazeControl_storeContext(swigCPtr, SWIGTYPE_p_int.getCPtr(id));
    return ret;
  }

  public virtual bool restoreContext(int id) {
    bool ret = yarpPINVOKE.IGazeControl_restoreContext(swigCPtr, id);
    return ret;
  }

  public virtual bool deleteContext(int id) {
    bool ret = yarpPINVOKE.IGazeControl_deleteContext(swigCPtr, id);
    return ret;
  }

  public virtual bool getInfo(Bottle info) {
    bool ret = yarpPINVOKE.IGazeControl_getInfo(swigCPtr, Bottle.getCPtr(info));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool registerEvent(GazeEvent arg0) {
    bool ret = yarpPINVOKE.IGazeControl_registerEvent(swigCPtr, GazeEvent.getCPtr(arg0));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool unregisterEvent(GazeEvent arg0) {
    bool ret = yarpPINVOKE.IGazeControl_unregisterEvent(swigCPtr, GazeEvent.getCPtr(arg0));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool tweakSet(Bottle options) {
    bool ret = yarpPINVOKE.IGazeControl_tweakSet(swigCPtr, Bottle.getCPtr(options));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool tweakGet(Bottle options) {
    bool ret = yarpPINVOKE.IGazeControl_tweakGet(swigCPtr, Bottle.getCPtr(options));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getTrackingMode() {
    bool ret = yarpPINVOKE.IGazeControl_getTrackingMode__SWIG_1(swigCPtr);
    return ret;
  }

  public double getNeckTrajTime() {
    double ret = yarpPINVOKE.IGazeControl_getNeckTrajTime__SWIG_1(swigCPtr);
    return ret;
  }

  public double getEyesTrajTime() {
    double ret = yarpPINVOKE.IGazeControl_getEyesTrajTime__SWIG_1(swigCPtr);
    return ret;
  }

  public bool checkMotionDone() {
    bool ret = yarpPINVOKE.IGazeControl_checkMotionDone__SWIG_1(swigCPtr);
    return ret;
  }

}
