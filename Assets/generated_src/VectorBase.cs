/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class VectorBase : Portable {
  private HandleRef swigCPtr;

  internal VectorBase(IntPtr cPtr, bool cMemoryOwn) : base(yarpPINVOKE.VectorBase_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(VectorBase obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~VectorBase() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          yarpPINVOKE.delete_VectorBase(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual int getElementSize() {
    int ret = yarpPINVOKE.VectorBase_getElementSize(swigCPtr);
    return ret;
  }

  public virtual uint getListSize() {
    uint ret = yarpPINVOKE.VectorBase_getListSize(swigCPtr);
    return ret;
  }

  public virtual string getMemoryBlock() {
    string ret = yarpPINVOKE.VectorBase_getMemoryBlock(swigCPtr);
    return ret;
  }

  public virtual void resize(uint size) {
    yarpPINVOKE.VectorBase_resize(swigCPtr, size);
  }

  public new bool read(ConnectionReader connection) {
    bool ret = yarpPINVOKE.VectorBase_read(swigCPtr, ConnectionReader.getCPtr(connection));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new bool write(ConnectionWriter connection) {
    bool ret = yarpPINVOKE.VectorBase_write(swigCPtr, ConnectionWriter.getCPtr(connection));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
