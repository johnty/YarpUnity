/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Image : Portable {
  private HandleRef swigCPtr;

  internal Image(IntPtr cPtr, bool cMemoryOwn) : base(yarpPINVOKE.Image_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Image obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Image() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          yarpPINVOKE.delete_Image(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Image() : this(yarpPINVOKE.new_Image__SWIG_0(), true) {
  }

  public Image(Image alt) : this(yarpPINVOKE.new_Image__SWIG_1(Image.getCPtr(alt)), true) {
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool copy(Image alt) {
    bool ret = yarpPINVOKE.Image_copy__SWIG_0(swigCPtr, Image.getCPtr(alt));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool copy(Image alt, int w, int h) {
    bool ret = yarpPINVOKE.Image_copy__SWIG_1(swigCPtr, Image.getCPtr(alt), w, h);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int width() {
    int ret = yarpPINVOKE.Image_width(swigCPtr);
    return ret;
  }

  public int height() {
    int ret = yarpPINVOKE.Image_height(swigCPtr);
    return ret;
  }

  public virtual int getPixelSize() {
    int ret = yarpPINVOKE.Image_getPixelSize(swigCPtr);
    return ret;
  }

  public virtual int getPixelCode() {
    int ret = yarpPINVOKE.Image_getPixelCode(swigCPtr);
    return ret;
  }

  public int getRowSize() {
    int ret = yarpPINVOKE.Image_getRowSize(swigCPtr);
    return ret;
  }

  public int getQuantum() {
    int ret = yarpPINVOKE.Image_getQuantum(swigCPtr);
    return ret;
  }

  public int getPadding() {
    int ret = yarpPINVOKE.Image_getPadding(swigCPtr);
    return ret;
  }

  public IntPtr getRow(int r) { return yarpPINVOKE.Image_getRow(swigCPtr, r); }

  public IntPtr getPixelAddress(int x, int y) { return yarpPINVOKE.Image_getPixelAddress(swigCPtr, x, y); }

  public bool isPixel(int x, int y) {
    bool ret = yarpPINVOKE.Image_isPixel(swigCPtr, x, y);
    return ret;
  }

  public void zero() {
    yarpPINVOKE.Image_zero(swigCPtr);
  }

  public void resize(int imgWidth, int imgHeight) {
    yarpPINVOKE.Image_resize__SWIG_0(swigCPtr, imgWidth, imgHeight);
  }

  public void resize(Image alt) {
    yarpPINVOKE.Image_resize__SWIG_1(swigCPtr, Image.getCPtr(alt));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setExternal(SWIGTYPE_p_void data, int imgWidth, int imgHeight) {
    yarpPINVOKE.Image_setExternal(swigCPtr, SWIGTYPE_p_void.getCPtr(data), imgWidth, imgHeight);
  }

  public IntPtr getRawImage() { return yarpPINVOKE.Image_getRawImage(swigCPtr); }

  public int getRawImageSize() {
    int ret = yarpPINVOKE.Image_getRawImageSize(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_void getIplImage() {
    IntPtr cPtr = yarpPINVOKE.Image_getIplImage(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public void wrapIplImage(SWIGTYPE_p_void iplImage) {
    yarpPINVOKE.Image_wrapIplImage(swigCPtr, SWIGTYPE_p_void.getCPtr(iplImage));
  }

  public new bool read(ConnectionReader connection) {
    bool ret = yarpPINVOKE.Image_read(swigCPtr, ConnectionReader.getCPtr(connection));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new bool write(ConnectionWriter connection) {
    bool ret = yarpPINVOKE.Image_write(swigCPtr, ConnectionWriter.getCPtr(connection));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setQuantum(int imgQuantum) {
    yarpPINVOKE.Image_setQuantum(swigCPtr, imgQuantum);
  }

  public bool topIsLowIndex() {
    bool ret = yarpPINVOKE.Image_topIsLowIndex(swigCPtr);
    return ret;
  }

  public void setTopIsLowIndex(bool flag) {
    yarpPINVOKE.Image_setTopIsLowIndex(swigCPtr, flag);
  }

  public SWIGTYPE_p_p_char getRowArray() {
    IntPtr cPtr = yarpPINVOKE.Image_getRowArray(swigCPtr);
    SWIGTYPE_p_p_char ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(cPtr, false);
    return ret;
  }

}
