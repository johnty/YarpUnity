/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class DeviceDriver : IConfig {
  private HandleRef swigCPtr;

  internal DeviceDriver(IntPtr cPtr, bool cMemoryOwn) : base(yarpPINVOKE.DeviceDriver_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(DeviceDriver obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~DeviceDriver() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          yarpPINVOKE.delete_DeviceDriver(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public override bool open(Searchable config) {
    bool ret = yarpPINVOKE.DeviceDriver_open(swigCPtr, Searchable.getCPtr(config));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool close() {
    bool ret = yarpPINVOKE.DeviceDriver_close(swigCPtr);
    return ret;
  }

  public virtual DeviceDriver getImplementation() {
    IntPtr cPtr = yarpPINVOKE.DeviceDriver_getImplementation(swigCPtr);
    DeviceDriver ret = (cPtr == IntPtr.Zero) ? null : new DeviceDriver(cPtr, false);
    return ret;
  }

  public DeviceDriver() : this(yarpPINVOKE.new_DeviceDriver(), true) {
  }

}
