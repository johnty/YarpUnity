/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class RpcServer : Contactable {
  private HandleRef swigCPtr;

  internal RpcServer(IntPtr cPtr, bool cMemoryOwn) : base(yarpPINVOKE.RpcServer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(RpcServer obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~RpcServer() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          yarpPINVOKE.delete_RpcServer(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public new bool open() {
    bool ret = yarpPINVOKE.RpcServer_open__SWIG_0_0(swigCPtr);
    return ret;
  }

  public override bool open(Contact contact, bool registerName) {
    bool ret = yarpPINVOKE.RpcServer_open__SWIG_0_1(swigCPtr, Contact.getCPtr(contact), registerName);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool open(Contact contact) {
    bool ret = yarpPINVOKE.RpcServer_open__SWIG_0_2(swigCPtr, Contact.getCPtr(contact));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RpcServer() : this(yarpPINVOKE.new_RpcServer(), true) {
  }

  public override bool open(string name) {
    bool ret = yarpPINVOKE.RpcServer_open__SWIG_1(swigCPtr, name);
    return ret;
  }

  public override bool addOutput(string name) {
    bool ret = yarpPINVOKE.RpcServer_addOutput__SWIG_0(swigCPtr, name);
    return ret;
  }

  public override bool addOutput(string name, string carrier) {
    bool ret = yarpPINVOKE.RpcServer_addOutput__SWIG_1(swigCPtr, name, carrier);
    return ret;
  }

  public override bool addOutput(Contact contact) {
    bool ret = yarpPINVOKE.RpcServer_addOutput__SWIG_2(swigCPtr, Contact.getCPtr(contact));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void close() {
    yarpPINVOKE.RpcServer_close(swigCPtr);
  }

  public override void interrupt() {
    yarpPINVOKE.RpcServer_interrupt(swigCPtr);
  }

  public override void resume() {
    yarpPINVOKE.RpcServer_resume(swigCPtr);
  }

  public override Contact where() {
    Contact ret = new Contact(yarpPINVOKE.RpcServer_where(swigCPtr), true);
    return ret;
  }

  public override ConstString getName() {
    ConstString ret = new ConstString(yarpPINVOKE.RpcServer_getName(swigCPtr), true);
    return ret;
  }

  public new bool read(PortReader reader, bool willReply) {
    bool ret = yarpPINVOKE.RpcServer_read(swigCPtr, PortReader.getCPtr(reader), willReply);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool reply(PortWriter writer) {
    bool ret = yarpPINVOKE.RpcServer_reply(swigCPtr, PortWriter.getCPtr(writer));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void setReader(PortReader reader) {
    yarpPINVOKE.RpcServer_setReader(swigCPtr, PortReader.getCPtr(reader));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setReaderCreator(PortReaderCreator creator) {
    yarpPINVOKE.RpcServer_setReaderCreator(swigCPtr, PortReaderCreator.getCPtr(creator));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool setEnvelope(PortWriter envelope) {
    bool ret = yarpPINVOKE.RpcServer_setEnvelope(swigCPtr, PortWriter.getCPtr(envelope));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool getEnvelope(PortReader envelope) {
    bool ret = yarpPINVOKE.RpcServer_getEnvelope(swigCPtr, PortReader.getCPtr(envelope));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int getInputCount() {
    int ret = yarpPINVOKE.RpcServer_getInputCount(swigCPtr);
    return ret;
  }

  public override int getOutputCount() {
    int ret = yarpPINVOKE.RpcServer_getOutputCount(swigCPtr);
    return ret;
  }

  public override void getReport(PortReport reporter) {
    yarpPINVOKE.RpcServer_getReport(swigCPtr, PortReport.getCPtr(reporter));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void setReporter(PortReport reporter) {
    yarpPINVOKE.RpcServer_setReporter(swigCPtr, PortReport.getCPtr(reporter));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool isWriting() {
    bool ret = yarpPINVOKE.RpcServer_isWriting(swigCPtr);
    return ret;
  }

}
